on:
  push:
    tags:
      - 'v*'

name: Release

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Prepare metadata
        id: meta
        run: |
          os=$(go env GOOS)
          arch=$(go env GOARCH)
          version=${GITHUB_REF##*/}
          echo "::set-output name=version::$version"
          echo "::set-output name=os::$os"
          echo "::set-output name=arch::$arch"
          echo "::set-output name=dist::terraform-provider-quorum_${version:1}_${os}_${arch}.zip"
          echo "::set-output name=name::terraform-provider-quorum_${version:1}_${os}_${arch}"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build ${{ steps.meta.outputs.os }}_${{ steps.meta.outputs.arch }} binary
        id: package
        run: |
          export VERSION=${{ steps.meta.outputs.version }}
          if [[ "${{ steps.meta.outputs.os }}" == "linux" ]]; then
            make distlinux
          else
            make distlocal
          fi
          cd build/${{ steps.meta.outputs.os }}_${{ steps.meta.outputs.arch }}
          zip ${{ runner.temp }}/${{ steps.meta.outputs.dist }} *
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.meta.outputs.name }}
          path: ${{ runner.temp }}/${{ steps.meta.outputs.dist }}
  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Extract tag name
        id: tag
        run: |
          full_version=${GITHUB_REF##*/}
          echo "::set-output name=value::${full_version}"
          echo "::set-output name=short::${full_version:1}"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Extract release notes
        id: release_notes
        run: |
          text=$(awk '/^## ${{ steps.tag.outputs.value }}$/{flag=1;next}/^##/{flag=0}flag' CHANGELOG.md)
          if [[ "$text" == "" ]]; then
            echo "::error file=CHANGELOG.md::There is no release notes for ${{ steps.tag.outputs.value }}"
            exit 1
          fi
          text="${text//'%'/'%25'}"
          text="${text//$'\n'/'%0A'}"
          text="${text//$'\r'/'%0D'}"
          echo "::set-output name=value::$text"
      - name: Create ${{ steps.tag.outputs.value }} release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.tag.outputs.value }}
          body: |
            ${{ steps.release_notes.outputs.value }}
          draft: true
          prerelease: false
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ runner.temp }}/artifacts
      - name: Import GPG key
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Generate checksums and sign
        id: gen
        working-directory: ${{ runner.temp }}/artifacts
        run: |
          output_dir="${{ runner.temp }}/artifacts/upload"
          mkdir -p ${output_dir}
          mv */terraform-provider-quorum*.zip ${output_dir}
          cd ${output_dir}
          f="terraform-provider-quorum_${{ steps.tag.outputs.short }}_SHA256SUMS"
          shasum -a 256 *.zip > ${f}
          gpg --detach-sign ${f}
          ls -lha
          echo "::set-output name=outdir::${output_dir}"
      - name: Upload release assets
        uses: csexton/release-asset-action@v2
        with:
          pattern: "${{ steps.gen.outputs.outdir }}/*"
          github-token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          release-url: ${{ steps.create_release.outputs.upload_url }}